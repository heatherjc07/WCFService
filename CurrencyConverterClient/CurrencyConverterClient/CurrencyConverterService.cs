//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(Namespace="http://Heather.ServiceModel.Samples", ConfigurationName="ICurrencyConverter")]
public interface ICurrencyConverter
{
    
    [System.ServiceModel.OperationContractAttribute(Action="http://Heather.ServiceModel.Samples/ICurrencyConverter/PoundsToDollars", ReplyAction="http://Heather.ServiceModel.Samples/ICurrencyConverter/PoundsToDollarsResponse")]
    double PoundsToDollars(double amt);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://Heather.ServiceModel.Samples/ICurrencyConverter/PoundsToDollars", ReplyAction="http://Heather.ServiceModel.Samples/ICurrencyConverter/PoundsToDollarsResponse")]
    System.Threading.Tasks.Task<double> PoundsToDollarsAsync(double amt);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://Heather.ServiceModel.Samples/ICurrencyConverter/DollarsToPounds", ReplyAction="http://Heather.ServiceModel.Samples/ICurrencyConverter/DollarsToPoundsResponse")]
    double DollarsToPounds(double amt);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://Heather.ServiceModel.Samples/ICurrencyConverter/DollarsToPounds", ReplyAction="http://Heather.ServiceModel.Samples/ICurrencyConverter/DollarsToPoundsResponse")]
    System.Threading.Tasks.Task<double> DollarsToPoundsAsync(double amt);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://Heather.ServiceModel.Samples/ICurrencyConverter/PoundsToEuros", ReplyAction="http://Heather.ServiceModel.Samples/ICurrencyConverter/PoundsToEurosResponse")]
    double PoundsToEuros(double amt);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://Heather.ServiceModel.Samples/ICurrencyConverter/PoundsToEuros", ReplyAction="http://Heather.ServiceModel.Samples/ICurrencyConverter/PoundsToEurosResponse")]
    System.Threading.Tasks.Task<double> PoundsToEurosAsync(double amt);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://Heather.ServiceModel.Samples/ICurrencyConverter/EurosToPounds", ReplyAction="http://Heather.ServiceModel.Samples/ICurrencyConverter/EurosToPoundsResponse")]
    double EurosToPounds(double amt);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://Heather.ServiceModel.Samples/ICurrencyConverter/EurosToPounds", ReplyAction="http://Heather.ServiceModel.Samples/ICurrencyConverter/EurosToPoundsResponse")]
    System.Threading.Tasks.Task<double> EurosToPoundsAsync(double amt);
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public interface ICurrencyConverterChannel : ICurrencyConverter, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class CurrencyConverterClient : System.ServiceModel.ClientBase<ICurrencyConverter>, ICurrencyConverter
{
    
    public CurrencyConverterClient()
    {
    }
    
    public CurrencyConverterClient(string endpointConfigurationName) : 
            base(endpointConfigurationName)
    {
    }
    
    public CurrencyConverterClient(string endpointConfigurationName, string remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public CurrencyConverterClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public CurrencyConverterClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(binding, remoteAddress)
    {
    }
    
    public double PoundsToDollars(double amt)
    {
        return base.Channel.PoundsToDollars(amt);
    }
    
    public System.Threading.Tasks.Task<double> PoundsToDollarsAsync(double amt)
    {
        return base.Channel.PoundsToDollarsAsync(amt);
    }
    
    public double DollarsToPounds(double amt)
    {
        return base.Channel.DollarsToPounds(amt);
    }
    
    public System.Threading.Tasks.Task<double> DollarsToPoundsAsync(double amt)
    {
        return base.Channel.DollarsToPoundsAsync(amt);
    }
    
    public double PoundsToEuros(double amt)
    {
        return base.Channel.PoundsToEuros(amt);
    }
    
    public System.Threading.Tasks.Task<double> PoundsToEurosAsync(double amt)
    {
        return base.Channel.PoundsToEurosAsync(amt);
    }
    
    public double EurosToPounds(double amt)
    {
        return base.Channel.EurosToPounds(amt);
    }
    
    public System.Threading.Tasks.Task<double> EurosToPoundsAsync(double amt)
    {
        return base.Channel.EurosToPoundsAsync(amt);
    }
}
